{"ast":null,"code":"import _regeneratorRuntime from \"/home/pragati/Desktop/saga/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchUsers),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(sagas);\n\nimport { call, put, takeEvery } from 'redux-saga/effects';\nimport { FETCH_USERS_INITIATED, FETCH_USERS_SUCCESS, FETCH_USERS_FAIL } from 'UTILS/actionConstants';\nexport function fetchUsersInitiate() {\n  return {\n    type: FETCH_USERS_INITIATED\n  };\n}\n\nfunction fetchUsersSuccess(data) {\n  return {\n    type: FETCH_USERS_SUCCESS,\n    payload: data\n  };\n}\n\nfunction fetchUsersFail(error) {\n  return {\n    type: FETCH_USERS_FAIL,\n    payload: error\n  };\n}\n\nfunction fetchUsers() {\n  var response, data;\n  return _regeneratorRuntime.wrap(function fetchUsers$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(function () {\n            return fetch(\"https://jsonplaceholder.typicode.com/users\");\n          });\n\n        case 3:\n          response = _context.sent;\n          _context.next = 6;\n          return call(function () {\n            return response.json.bind(response)();\n          });\n\n        case 6:\n          data = _context.sent;\n          _context.next = 9;\n          return put(fetchUsersSuccess(data));\n\n        case 9:\n          _context.next = 15;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 15;\n          return put(fetchUsersFail(_context.t0));\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[0, 11]]);\n}\n\nexport function sagas() {\n  return _regeneratorRuntime.wrap(function sagas$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(FETCH_USERS_INITIATED, fetchUsers);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}","map":{"version":3,"sources":["/home/pragati/Desktop/saga/src/actions/users.js"],"names":["fetchUsers","sagas","call","put","takeEvery","FETCH_USERS_INITIATED","FETCH_USERS_SUCCESS","FETCH_USERS_FAIL","fetchUsersInitiate","type","fetchUsersSuccess","data","payload","fetchUsersFail","error","fetch","response","json","bind"],"mappings":";;;;yBAuBUA,U;;;yBAUOC,K;;AAjCjB,SAASC,IAAT,EAAeC,GAAf,EAAoBC,SAApB,QAAqC,oBAArC;AACA,SAASC,qBAAT,EAAgCC,mBAAhC,EAAqDC,gBAArD,QAA6E,uBAA7E;AAEA,OAAO,SAASC,kBAAT,GAA8B;AACnC,SAAO;AACLC,IAAAA,IAAI,EAAEJ;AADD,GAAP;AAGD;;AAED,SAASK,iBAAT,CAA2BC,IAA3B,EAAiC;AAC/B,SAAO;AACLF,IAAAA,IAAI,EAAEH,mBADD;AAELM,IAAAA,OAAO,EAAED;AAFJ,GAAP;AAID;;AAED,SAASE,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,SAAO;AACLL,IAAAA,IAAI,EAAEF,gBADD;AAELK,IAAAA,OAAO,EAAEE;AAFJ,GAAP;AAID;;AAED,SAAUd,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEqB,iBAAME,IAAI,CAAC;AAAA,mBAAMa,KAAK,8CAAX;AAAA,WAAD,CAAV;;AAFrB;AAEUC,UAAAA,QAFV;AAAA;AAGiB,iBAAMd,IAAI,CAAC;AAAA,mBAAMc,QAAQ,CAACC,IAAT,CAAcC,IAAd,CAAmBF,QAAnB,GAAN;AAAA,WAAD,CAAV;;AAHjB;AAGUL,UAAAA,IAHV;AAAA;AAII,iBAAMR,GAAG,CAACO,iBAAiB,CAACC,IAAD,CAAlB,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMI,iBAAMR,GAAG,CAACU,cAAc,aAAf,CAAT;;AANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,OAAO,SAAUZ,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMG,SAAS,CAACC,qBAAD,EAAwBL,UAAxB,CAAf;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put, takeEvery } from 'redux-saga/effects';\nimport { FETCH_USERS_INITIATED, FETCH_USERS_SUCCESS, FETCH_USERS_FAIL } from 'UTILS/actionConstants';\n\nexport function fetchUsersInitiate() {\n  return {\n    type: FETCH_USERS_INITIATED,\n  }\n}\n\nfunction fetchUsersSuccess(data) {\n  return {\n    type: FETCH_USERS_SUCCESS,\n    payload: data,\n  }\n}\n\nfunction fetchUsersFail(error) {\n  return {\n    type: FETCH_USERS_FAIL,\n    payload: error,\n  }\n}\n\nfunction* fetchUsers() {\n  try {\n    const response = yield call(() => fetch(`https://jsonplaceholder.typicode.com/users`));\n    const data = yield call(() => response.json.bind(response)());\n    yield put(fetchUsersSuccess(data))\n  } catch (error) {\n    yield put(fetchUsersFail(error))\n  }\n}\n\nexport function* sagas() {\n  yield takeEvery(FETCH_USERS_INITIATED, fetchUsers)\n}\n"]},"metadata":{},"sourceType":"module"}